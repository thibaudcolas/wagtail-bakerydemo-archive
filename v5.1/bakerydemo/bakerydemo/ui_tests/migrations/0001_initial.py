# Generated by Django 4.1.7 on 2023-03-28 11:33

import bakerydemo.ui_tests.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.blocks.static_block
import wagtail.contrib.forms.models
import wagtail.contrib.table_block.blocks
import wagtail.contrib.typed_table_block.blocks
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("base", "0012_person_expire_at_person_expired_and_more"),
        ("wagtailcore", "0083_workflowcontenttype"),
        ("breads", "0006_breadingredient_expire_at_breadingredient_expired_and_more"),
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtaildocs", "0012_uploadeddocument"),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
    ]

    operations = [
        migrations.CreateModel(
            name="EverythingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "to_address",
                    models.CharField(
                        blank=True,
                        help_text="Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.",
                        max_length=255,
                        validators=[wagtail.contrib.forms.models.validate_to_address],
                        verbose_name="to address",
                    ),
                ),
                (
                    "from_address",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="from address"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="subject"
                    ),
                ),
                ("char_field", models.CharField(help_text="CharField", max_length=100)),
                (
                    "char_field_optional",
                    models.CharField(blank=True, help_text="CharField", max_length=100),
                ),
                (
                    "char_field_no_comments",
                    models.CharField(
                        blank=True, help_text="CharField no comments", max_length=100
                    ),
                ),
                (
                    "char_field_default",
                    models.CharField(
                        blank=True,
                        default="This is default value",
                        max_length=32,
                        verbose_name="Verbose name for char_field_default",
                    ),
                ),
                ("text_field", models.TextField(help_text="TextField", max_length=500)),
                (
                    "text_field_optional",
                    models.TextField(blank=True, help_text="TextField", max_length=500),
                ),
                (
                    "richtext_field",
                    wagtail.fields.RichTextField(help_text="RichTextField"),
                ),
                (
                    "richtext_field_optional",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="RichTextField optional"
                    ),
                ),
                (
                    "richtext_field_no_comments",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="RichTextField no comments"
                    ),
                ),
                (
                    "choices",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=10,
                    ),
                ),
                (
                    "choices_select_multiple",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=10,
                    ),
                ),
                (
                    "choices_checkbox_multiple",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=10,
                    ),
                ),
                (
                    "choices_radio_select",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=10,
                    ),
                ),
                (
                    "choices_button_select",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=10,
                    ),
                ),
                (
                    "char_field_title",
                    models.CharField(help_text="CharField title", max_length=100),
                ),
                (
                    "char_field_password",
                    models.CharField(
                        blank=True, help_text="CharField password", max_length=100
                    ),
                ),
                ("boolean_field", models.BooleanField(help_text="BooleanField")),
                ("date_field", models.DateField(help_text="DateField")),
                ("datetime_field", models.DateTimeField(help_text="DateTimeField")),
                ("time_field", models.TimeField(help_text="TimeField")),
                (
                    "decimal_field",
                    models.DecimalField(
                        decimal_places=2, help_text="DecimalField", max_digits=10
                    ),
                ),
                (
                    "duration_field",
                    models.DurationField(
                        blank=True, help_text="DurationField", null=True
                    ),
                ),
                (
                    "email_field",
                    models.EmailField(help_text="EmailField", max_length=254),
                ),
                (
                    "file_field",
                    models.FileField(blank=True, help_text="FileField", upload_to=""),
                ),
                (
                    "file_field_clearable",
                    models.FileField(
                        blank=True, help_text="FileField clearable", upload_to=""
                    ),
                ),
                ("float_field", models.FloatField(help_text="FloatField")),
                (
                    "genericipaddress_field",
                    models.GenericIPAddressField(
                        blank=True, help_text="GenericIPAddressField", null=True
                    ),
                ),
                (
                    "image_field",
                    models.ImageField(
                        blank=True, help_text="ImageField", null=True, upload_to=""
                    ),
                ),
                ("integer_field", models.IntegerField(help_text="IntegerField")),
                ("json_field", models.JSONField(help_text="JSONField")),
                (
                    "positivebiginteger_field",
                    models.PositiveBigIntegerField(
                        blank=True, help_text="PositiveBigIntegerField", null=True
                    ),
                ),
                (
                    "positiveinteger_field",
                    models.PositiveIntegerField(
                        blank=True, help_text="PositiveIntegerField", null=True
                    ),
                ),
                (
                    "positivesmallinteger_field",
                    models.PositiveSmallIntegerField(
                        blank=True, help_text="PositiveSmallIntegerField", null=True
                    ),
                ),
                ("slug_field", models.SlugField(blank=True, help_text="SlugField")),
                (
                    "smallinteger_field",
                    models.SmallIntegerField(
                        blank=True, help_text="SmallIntegerField", null=True
                    ),
                ),
                ("url_field", models.URLField(help_text="URLField")),
                (
                    "uuid_field",
                    models.UUIDField(blank=True, help_text="UUIDField", null=True),
                ),
                (
                    "backstory",
                    wagtail.fields.StreamField(
                        [
                            (
                                "heading_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                form_classname="title", required=True
                                            ),
                                        ),
                                        (
                                            "size",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Select a header size"),
                                                    ("h2", "H2"),
                                                    ("h3", "H3"),
                                                    ("h4", "H4"),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "paragraph_block",
                                wagtail.blocks.RichTextBlock(
                                    icon="pilcrow",
                                    template="blocks/paragraph_block.html",
                                ),
                            ),
                            (
                                "image_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=True
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "block_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("text", wagtail.blocks.TextBlock()),
                                        (
                                            "attribute_name",
                                            wagtail.blocks.CharBlock(
                                                blank=True,
                                                label="e.g. Mary Berry",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "embed_block",
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text="Insert an embed URL e.g https://www.youtube.com/watch?v=SGJFWirQ3ks",
                                    icon="media",
                                    template="blocks/embed_block.html",
                                ),
                            ),
                        ],
                        blank=True,
                        help_text="Use only a minimum number of headings and large blocks.",
                        use_json_field=True,
                    ),
                ),
                (
                    "recipe_headline",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Keep to a single line", max_length=120
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "heading_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                form_classname="title", required=True
                                            ),
                                        ),
                                        (
                                            "size",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Select a header size"),
                                                    ("h2", "H2"),
                                                    ("h3", "H3"),
                                                    ("h4", "H4"),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    group="Content",
                                ),
                            ),
                            (
                                "paragraph_block",
                                wagtail.blocks.RichTextBlock(
                                    group="Content",
                                    icon="pilcrow",
                                    template="blocks/paragraph_block.html",
                                ),
                            ),
                            (
                                "block_quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("text", wagtail.blocks.TextBlock()),
                                        (
                                            "attribute_name",
                                            wagtail.blocks.CharBlock(
                                                blank=True,
                                                label="e.g. Mary Berry",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    group="Content",
                                ),
                            ),
                            (
                                "table_block",
                                wagtail.contrib.table_block.blocks.TableBlock(
                                    group="Content"
                                ),
                            ),
                            (
                                "typed_table_block",
                                wagtail.contrib.typed_table_block.blocks.TypedTableBlock(
                                    [
                                        ("text", wagtail.blocks.CharBlock()),
                                        ("numeric", wagtail.blocks.FloatBlock()),
                                        ("rich_text", wagtail.blocks.RichTextBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                    ],
                                    group="Content",
                                ),
                            ),
                            (
                                "image_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=True
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ],
                                    group="Media",
                                ),
                            ),
                            (
                                "embed_block",
                                wagtail.embeds.blocks.EmbedBlock(
                                    group="Media",
                                    help_text="Insert an embed URL e.g https://www.youtube.com/watch?v=SGJFWirQ3ks",
                                    icon="media",
                                    template="blocks/embed_block.html",
                                ),
                            ),
                            (
                                "ingredients_list",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.RichTextBlock(
                                        features=["bold", "italic", "link"]
                                    ),
                                    group="Cooking",
                                    icon="list-ol",
                                    max_num=10,
                                    min_num=2,
                                ),
                            ),
                            (
                                "steps_list",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "text",
                                                wagtail.blocks.RichTextBlock(
                                                    features=["bold", "italic", "link"]
                                                ),
                                            ),
                                            (
                                                "difficulty",
                                                wagtail.blocks.ChoiceBlock(
                                                    choices=[
                                                        ("S", "Small"),
                                                        ("M", "Medium"),
                                                        ("L", "Large"),
                                                    ]
                                                ),
                                            ),
                                        ]
                                    ),
                                    group="Cooking",
                                    icon="tasks",
                                    max_num=10,
                                    min_num=2,
                                ),
                            ),
                        ],
                        blank=True,
                        help_text="The recipe’s step-by-step instructions and any other relevant information.",
                        use_json_field=True,
                    ),
                ),
                (
                    "complex_body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    group="Text", icon="doc-empty"
                                ),
                            ),
                            (
                                "heading",
                                wagtail.blocks.TextBlock(
                                    group="Text",
                                    icon="search",
                                    template="blocks/heading.html",
                                ),
                            ),
                            (
                                "smaller_heading",
                                wagtail.blocks.TextBlock(group="Text", icon="title"),
                            ),
                            (
                                "smallest_heading",
                                wagtail.blocks.TextBlock(group="Text", icon="title"),
                            ),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                    ],
                                    group="Media stuff",
                                ),
                            ),
                            (
                                "embed",
                                wagtail.embeds.blocks.EmbedBlock(
                                    group="Media stuff", icon="media"
                                ),
                            ),
                            (
                                "download",
                                wagtail.documents.blocks.DocumentChooserBlock(
                                    group="Meta stuff", icon="download"
                                ),
                            ),
                            (
                                "accordion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "panels",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "title",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="The headline to display when the accordion panel is closed."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.RichTextBlock(
                                                                help_text="The inner content of this accordion panel. It is initially hidden."
                                                            ),
                                                        ),
                                                    ],
                                                    label="Panel",
                                                )
                                            ),
                                        )
                                    ],
                                    group="Meta stuff",
                                ),
                            ),
                            (
                                "notice",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "message",
                                            wagtail.blocks.RichTextBlock(
                                                help_text="Write the message text."
                                            ),
                                        ),
                                        (
                                            "indicator",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("", "Standard"),
                                                    ("success", "Success"),
                                                    ("alert", "Alert"),
                                                    ("warning", "Warning"),
                                                ],
                                                help_text="Choose what type of notice this is.",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    group="Meta stuff",
                                ),
                            ),
                            (
                                "limited_stream",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "paragraph",
                                            wagtail.blocks.RichTextBlock(
                                                icon="pilcrow"
                                            ),
                                        ),
                                        (
                                            "smaller_heading",
                                            wagtail.blocks.TextBlock(
                                                icon="title",
                                                template="blocks/smaller_heading.html",
                                            ),
                                        ),
                                        (
                                            "another_stream",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "heading_block",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "heading_text",
                                                                    wagtail.blocks.CharBlock(
                                                                        form_classname="title",
                                                                        required=True,
                                                                    ),
                                                                ),
                                                                (
                                                                    "size",
                                                                    wagtail.blocks.ChoiceBlock(
                                                                        blank=True,
                                                                        choices=[
                                                                            (
                                                                                "",
                                                                                "Select a header size",
                                                                            ),
                                                                            (
                                                                                "h2",
                                                                                "H2",
                                                                            ),
                                                                            (
                                                                                "h3",
                                                                                "H3",
                                                                            ),
                                                                            (
                                                                                "h4",
                                                                                "H4",
                                                                            ),
                                                                        ],
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "paragraph_block",
                                                        wagtail.blocks.RichTextBlock(
                                                            icon="fa-paragraph",
                                                            template="blocks/paragraph_block.html",
                                                        ),
                                                    ),
                                                    (
                                                        "image_block",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "image",
                                                                    wagtail.images.blocks.ImageChooserBlock(
                                                                        required=True
                                                                    ),
                                                                ),
                                                                (
                                                                    "caption",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                                (
                                                                    "attribution",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "block_quote",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "text",
                                                                    wagtail.blocks.TextBlock(),
                                                                ),
                                                                (
                                                                    "attribute_name",
                                                                    wagtail.blocks.CharBlock(
                                                                        blank=True,
                                                                        label="e.g. Mary Berry",
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "embed_block",
                                                        wagtail.embeds.blocks.EmbedBlock(
                                                            help_text="Insert an embed URL e.g https://www.youtube.com/embed/SGJFWirQ3ks",
                                                            icon="fa-s15",
                                                            template="blocks/embed_block.html",
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ],
                                    group="Other streamfields",
                                    help_text="blah blah",
                                    label="Limited streamfield thing",
                                ),
                            ),
                            (
                                "section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "headline",
                                            wagtail.blocks.TextBlock(
                                                help_text="Write a title for this section."
                                            ),
                                        ),
                                        (
                                            "subheadline",
                                            wagtail.blocks.TextBlock(
                                                help_text="Write a subheadline for this section (optional).",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "body",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "paragraph",
                                                        wagtail.blocks.RichTextBlock(
                                                            icon="doc-empty"
                                                        ),
                                                    ),
                                                    (
                                                        "heading",
                                                        wagtail.blocks.TextBlock(
                                                            icon="search",
                                                            template="blocks/heading.html",
                                                        ),
                                                    ),
                                                    (
                                                        "smaller_heading",
                                                        wagtail.blocks.TextBlock(
                                                            icon="title"
                                                        ),
                                                    ),
                                                    (
                                                        "smallest_heading",
                                                        wagtail.blocks.TextBlock(
                                                            icon="title"
                                                        ),
                                                    ),
                                                    (
                                                        "image",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "image",
                                                                    wagtail.images.blocks.ImageChooserBlock(),
                                                                ),
                                                                (
                                                                    "caption",
                                                                    wagtail.blocks.TextBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "embed",
                                                        wagtail.embeds.blocks.EmbedBlock(
                                                            icon="media"
                                                        ),
                                                    ),
                                                    (
                                                        "download",
                                                        wagtail.documents.blocks.DocumentChooserBlock(
                                                            icon="download"
                                                        ),
                                                    ),
                                                    (
                                                        "accordion",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "panels",
                                                                    wagtail.blocks.ListBlock(
                                                                        wagtail.blocks.StructBlock(
                                                                            [
                                                                                (
                                                                                    "title",
                                                                                    wagtail.blocks.TextBlock(
                                                                                        help_text="The headline to display when the accordion panel is closed."
                                                                                    ),
                                                                                ),
                                                                                (
                                                                                    "body",
                                                                                    wagtail.blocks.RichTextBlock(
                                                                                        help_text="The inner content of this accordion panel. It is initially hidden."
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            label="Panel",
                                                                        )
                                                                    ),
                                                                )
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "notice",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "message",
                                                                    wagtail.blocks.RichTextBlock(
                                                                        help_text="Write the message text."
                                                                    ),
                                                                ),
                                                                (
                                                                    "indicator",
                                                                    wagtail.blocks.ChoiceBlock(
                                                                        choices=[
                                                                            (
                                                                                "",
                                                                                "Standard",
                                                                            ),
                                                                            (
                                                                                "success",
                                                                                "Success",
                                                                            ),
                                                                            (
                                                                                "alert",
                                                                                "Alert",
                                                                            ),
                                                                            (
                                                                                "warning",
                                                                                "Warning",
                                                                            ),
                                                                        ],
                                                                        help_text="Choose what type of notice this is.",
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "limited_stream",
                                                        wagtail.blocks.StreamBlock(
                                                            [
                                                                (
                                                                    "paragraph",
                                                                    wagtail.blocks.RichTextBlock(
                                                                        icon="pilcrow"
                                                                    ),
                                                                ),
                                                                (
                                                                    "smaller_heading",
                                                                    wagtail.blocks.TextBlock(
                                                                        icon="title",
                                                                        template="blocks/smaller_heading.html",
                                                                    ),
                                                                ),
                                                                (
                                                                    "another_stream",
                                                                    wagtail.blocks.StreamBlock(
                                                                        [
                                                                            (
                                                                                "heading_block",
                                                                                wagtail.blocks.StructBlock(
                                                                                    [
                                                                                        (
                                                                                            "heading_text",
                                                                                            wagtail.blocks.CharBlock(
                                                                                                form_classname="title",
                                                                                                required=True,
                                                                                            ),
                                                                                        ),
                                                                                        (
                                                                                            "size",
                                                                                            wagtail.blocks.ChoiceBlock(
                                                                                                blank=True,
                                                                                                choices=[
                                                                                                    (
                                                                                                        "",
                                                                                                        "Select a header size",
                                                                                                    ),
                                                                                                    (
                                                                                                        "h2",
                                                                                                        "H2",
                                                                                                    ),
                                                                                                    (
                                                                                                        "h3",
                                                                                                        "H3",
                                                                                                    ),
                                                                                                    (
                                                                                                        "h4",
                                                                                                        "H4",
                                                                                                    ),
                                                                                                ],
                                                                                                required=False,
                                                                                            ),
                                                                                        ),
                                                                                    ]
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "paragraph_block",
                                                                                wagtail.blocks.RichTextBlock(
                                                                                    icon="fa-paragraph",
                                                                                    template="blocks/paragraph_block.html",
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "image_block",
                                                                                wagtail.blocks.StructBlock(
                                                                                    [
                                                                                        (
                                                                                            "image",
                                                                                            wagtail.images.blocks.ImageChooserBlock(
                                                                                                required=True
                                                                                            ),
                                                                                        ),
                                                                                        (
                                                                                            "caption",
                                                                                            wagtail.blocks.CharBlock(
                                                                                                required=False
                                                                                            ),
                                                                                        ),
                                                                                        (
                                                                                            "attribution",
                                                                                            wagtail.blocks.CharBlock(
                                                                                                required=False
                                                                                            ),
                                                                                        ),
                                                                                    ]
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "block_quote",
                                                                                wagtail.blocks.StructBlock(
                                                                                    [
                                                                                        (
                                                                                            "text",
                                                                                            wagtail.blocks.TextBlock(),
                                                                                        ),
                                                                                        (
                                                                                            "attribute_name",
                                                                                            wagtail.blocks.CharBlock(
                                                                                                blank=True,
                                                                                                label="e.g. Mary Berry",
                                                                                                required=False,
                                                                                            ),
                                                                                        ),
                                                                                    ]
                                                                                ),
                                                                            ),
                                                                            (
                                                                                "embed_block",
                                                                                wagtail.embeds.blocks.EmbedBlock(
                                                                                    help_text="Insert an embed URL e.g https://www.youtube.com/embed/SGJFWirQ3ks",
                                                                                    icon="fa-s15",
                                                                                    template="blocks/embed_block.html",
                                                                                ),
                                                                            ),
                                                                        ]
                                                                    ),
                                                                ),
                                                            ],
                                                            help_text="blah blah",
                                                            label="Limited Stream Field",
                                                        ),
                                                    ),
                                                ],
                                                group="Grouped links",
                                                help_text="The section content goes here.",
                                                label="Another streamblock",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    group="Other streamfields",
                                ),
                            ),
                            (
                                "table",
                                wagtail.contrib.typed_table_block.blocks.TypedTableBlock(
                                    [
                                        ("text", wagtail.blocks.CharBlock()),
                                        ("numeric", wagtail.blocks.FloatBlock()),
                                        ("rich_text", wagtail.blocks.RichTextBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "country",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("be", "Belgium"),
                                                    ("fr", "France"),
                                                    ("de", "Germany"),
                                                    ("nl", "Netherlands"),
                                                    ("pl", "Poland"),
                                                    ("uk", "United Kingdom"),
                                                ]
                                            ),
                                        ),
                                    ],
                                    group="Tables",
                                ),
                            ),
                        ],
                        blank=True,
                        use_json_field=True,
                        verbose_name="Complex body",
                    ),
                ),
                (
                    "every_block_under_the_sun",
                    wagtail.fields.StreamField(
                        [
                            ("charblock", wagtail.blocks.CharBlock()),
                            ("textblock", wagtail.blocks.TextBlock()),
                            ("emailblock", wagtail.blocks.EmailBlock()),
                            ("integerblock", wagtail.blocks.IntegerBlock()),
                            ("floatblock", wagtail.blocks.FloatBlock()),
                            ("decimalblock", wagtail.blocks.DecimalBlock()),
                            (
                                "regexblock",
                                wagtail.blocks.RegexBlock(
                                    error_messages={
                                        "invalid": "Not a valid library card number."
                                    },
                                    regex="^[0-9]{3}$",
                                ),
                            ),
                            ("url", wagtail.blocks.URLBlock()),
                            ("boolean", wagtail.blocks.BooleanBlock()),
                            ("date", wagtail.blocks.DateBlock()),
                            ("time", wagtail.blocks.TimeBlock()),
                            ("date_time", wagtail.blocks.DateTimeBlock()),
                            ("richtext", wagtail.blocks.RichTextBlock()),
                            ("blah", wagtail.blocks.RawHTMLBlock()),
                            ("blockquote", wagtail.blocks.BlockQuoteBlock()),
                            (
                                "choices",
                                wagtail.blocks.ChoiceBlock(
                                    choices=[("tea", "Tea"), ("coffee", "Coffee")],
                                    icon="cup",
                                ),
                            ),
                            ("pagechooser", wagtail.blocks.PageChooserBlock()),
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(),
                            ),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            (
                                "snippets",
                                wagtail.snippets.blocks.SnippetChooserBlock(
                                    "base.person"
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            (
                                "staticblock",
                                wagtail.blocks.static_block.StaticBlock(
                                    admin_text="Tom is hot."
                                ),
                            ),
                            (
                                "listblock",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "panels",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "title",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="The headline to display when the accordion panel is closed."
                                                            ),
                                                        ),
                                                        (
                                                            "body",
                                                            wagtail.blocks.RichTextBlock(
                                                                help_text="The inner content of this accordion panel. It is initially hidden."
                                                            ),
                                                        ),
                                                    ],
                                                    label="Panel",
                                                )
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "structblock",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "streamblock",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "paragraph",
                                            wagtail.blocks.RichTextBlock(
                                                icon="pilcrow"
                                            ),
                                        ),
                                        (
                                            "smaller_heading",
                                            wagtail.blocks.TextBlock(
                                                icon="title",
                                                template="blocks/smaller_heading.html",
                                            ),
                                        ),
                                        (
                                            "another_stream",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "heading_block",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "heading_text",
                                                                    wagtail.blocks.CharBlock(
                                                                        form_classname="title",
                                                                        required=True,
                                                                    ),
                                                                ),
                                                                (
                                                                    "size",
                                                                    wagtail.blocks.ChoiceBlock(
                                                                        blank=True,
                                                                        choices=[
                                                                            (
                                                                                "",
                                                                                "Select a header size",
                                                                            ),
                                                                            (
                                                                                "h2",
                                                                                "H2",
                                                                            ),
                                                                            (
                                                                                "h3",
                                                                                "H3",
                                                                            ),
                                                                            (
                                                                                "h4",
                                                                                "H4",
                                                                            ),
                                                                        ],
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "paragraph_block",
                                                        wagtail.blocks.RichTextBlock(
                                                            icon="fa-paragraph",
                                                            template="blocks/paragraph_block.html",
                                                        ),
                                                    ),
                                                    (
                                                        "image_block",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "image",
                                                                    wagtail.images.blocks.ImageChooserBlock(
                                                                        required=True
                                                                    ),
                                                                ),
                                                                (
                                                                    "caption",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                                (
                                                                    "attribution",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "block_quote",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "text",
                                                                    wagtail.blocks.TextBlock(),
                                                                ),
                                                                (
                                                                    "attribute_name",
                                                                    wagtail.blocks.CharBlock(
                                                                        blank=True,
                                                                        label="e.g. Mary Berry",
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "embed_block",
                                                        wagtail.embeds.blocks.EmbedBlock(
                                                            help_text="Insert an embed URL e.g https://www.youtube.com/embed/SGJFWirQ3ks",
                                                            icon="fa-s15",
                                                            template="blocks/embed_block.html",
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("table", wagtail.contrib.table_block.blocks.TableBlock()),
                            (
                                "typed_table",
                                wagtail.contrib.typed_table_block.blocks.TypedTableBlock(
                                    [
                                        ("text", wagtail.blocks.CharBlock()),
                                        ("numeric", wagtail.blocks.FloatBlock()),
                                        ("rich_text", wagtail.blocks.RichTextBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "country",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("be", "Belgium"),
                                                    ("fr", "France"),
                                                    ("de", "Germany"),
                                                    ("nl", "Netherlands"),
                                                    ("pl", "Poland"),
                                                    ("uk", "United Kingdom"),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "featured_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="featured_page help_text",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "file_download",
                    models.ForeignKey(
                        blank=True,
                        help_text="file_download help_text",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtaildocs.document",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        help_text="image help_text",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "ingredients",
                    modelcluster.fields.ParentalManyToManyField(
                        blank=True, to="breads.breadingredient"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail.contrib.forms.models.FormMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="FormField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "clean_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Safe name of the form field, the label converted to ascii_snake_case",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the form field",
                        max_length=255,
                        verbose_name="label",
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("singleline", "Single line text"),
                            ("multiline", "Multi-line text"),
                            ("email", "Email"),
                            ("number", "Number"),
                            ("url", "URL"),
                            ("checkbox", "Checkbox"),
                            ("checkboxes", "Checkboxes"),
                            ("dropdown", "Drop down"),
                            ("multiselect", "Multiple select"),
                            ("radio", "Radio buttons"),
                            ("date", "Date"),
                            ("datetime", "Date/time"),
                            ("hidden", "Hidden field"),
                        ],
                        max_length=16,
                        verbose_name="field type",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(default=True, verbose_name="required"),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.",
                        verbose_name="choices",
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True,
                        help_text="Default value. Comma or new line separated values supported for checkboxes.",
                        verbose_name="default value",
                    ),
                ),
                (
                    "help_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="help text"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="form_fields",
                        to="ui_tests.everythingpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EverythingPersonRelationship",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="everything_person_relationship",
                        to="ui_tests.everythingpage",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="person_everything_relationship",
                        to="base.person",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EverythingPageTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="ui_tests.everythingpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="everythingpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="ui_tests.EverythingPageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="EverythingOperatingHours",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "day",
                    models.CharField(
                        choices=[
                            ("MON", "Monday"),
                            ("TUES", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THUR", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        default="MON",
                        max_length=4,
                    ),
                ),
                ("opening_time", models.TimeField(blank=True, null=True)),
                ("closing_time", models.TimeField(blank=True, null=True)),
                (
                    "closed",
                    models.BooleanField(
                        blank=True,
                        help_text="Tick if location is closed on this day",
                        verbose_name="Closed?",
                    ),
                ),
                (
                    "location",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hours_of_operation",
                        to="ui_tests.everythingpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EverythingWorkflowTasks",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workflow_tasks",
                        to="ui_tests.everythingpage",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        limit_choices_to={"active": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.task",
                        verbose_name="task",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("page", "task")},
            },
        ),
    ]
